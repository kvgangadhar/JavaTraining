
Hibernate:
- Object Relational Mapping (ORM)
- Intro to Hibernate and it's advantages
- Hibernate Application Architecture
- Environment Setup
- Configuration
- Configuration properties
- Session Factory
- Session
- POJO (Plain Old Java Objects)
- POJO instance states
- Working with Hibernate
- JPA Annotations
- CRUD operations using Session
- Transaction handling
- Create Entities with associations.

Singleton Design Pattern: http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples


Reference:
http://www.tutorialspoint.com/hibernate/
http://www.logicbig.com/tutorials/java-ee-tutorial/jpa/
http://fruzenshtein.com/one-to-one-unidirectional-primary-key/
http://fruzenshtein.com/bidirectional-one-to-one-primary-key-association/


Exercise:

1. Create a library as OrderLibrary where you can implement the hibernate Entities for the following table as we discussed.
(Note: Later you will extend this Library further)

Customer
Address
PaymentMethod


Exer:
Develop the library to implement the following API,

1. Add Customer along with Address (https://vladmihalcea.com/2015/03/05/a-beginners-guide-to-jpa-and-hibernate-cascade-types/)
2. Add PaymentMethods for a customer
3. Fetch all the PaymentMethods for given customer.
4. Fetch Customer along with Address and Payment methods
5. Fetch Customer along with Address but no Payment methods
6. Delete Customer and all associated information.
7. Update customer payment methods with new information
8. Delete a Payment method of a customer
9. Apply logging for all the above api/methods

//
inteface CustomerService {
	updateAddress(Address address);
	updateCustomer(Customer customer);
	deleteCustomer(Long custId);
	int deletePaymentMethods(Long custId);
	Customer createCustomer(Customer customer);
	PaymentMethod updatePaymentMethod(PaymentMethod paymentMethod);
	Customer findCustomerFullData(Long custId);
}

interface CustomerDao {
	Customer saveCustomer(Customer customer);
	Customer findCustomer(Customer customer); //For Customer and  customer with address (Note: Address is eager load)
	Customer findCustomerFullData(Long custId);
	int deleteCustomer(Long custId); //will delete along the customer information also.
	Customer updateCustomer(Customer customer);
}

interface AddressDao {
	Address updateAddress(Address address);
	int deleteAddress(Long custId);
}

interface PaymentMethodDao {
	List<PaymentMethod> findPaymentMehods(Long custId);
	int deletePaymentMethods(Long custId);
	PaymentMethod updatePaymentMethod(PaymentMethod paymentMethod);
}


# create Customer
curl -X POST -H "Content-Type: application/json" -d '{"name":"Thor ragnarok", "address":{"aptNo":"456","streetNo":56,"zip":96001,"streetName":"Freak Street","city":"Laramie","state":"WY"}}' http://localhost:8080/customers/create

# add payment methods
curl -X POST -H "Content-Type: application/json" -d '{"cardNumber":"545678995","cardName":"WELLS FARGO BANK", "cardType":"CREDIT_CARD"}' http://localhost:8080/customers/6/addPaymentMethod